{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Harshal Taori\\\\Documents\\\\MFPE PROJECT\\\\26  TUESDAY\\\\friendbook-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Harshal Taori\\\\Documents\\\\MFPE PROJECT\\\\26  TUESDAY\\\\friendbook-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Harshal Taori\\\\Documents\\\\MFPE PROJECT\\\\26  TUESDAY\\\\friendbook-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Harshal Taori\\\\Documents\\\\MFPE PROJECT\\\\26  TUESDAY\\\\friendbook-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Harshal Taori\\\\Documents\\\\MFPE PROJECT\\\\26  TUESDAY\\\\friendbook-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Harshal Taori\\\\Documents\\\\MFPE PROJECT\\\\26  TUESDAY\\\\friendbook-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Harshal Taori\\\\Documents\\\\MFPE PROJECT\\\\26  TUESDAY\\\\friendbook-frontend\\\\src\\\\components\\\\chatbox\\\\ChatBoxSide.jsx\";\nimport React, { Component } from 'react';\nimport './chatbox.scss';\nimport ChatModule from './ChatModule';\nimport Socket from '../post/StartSocket';\nimport Avatar from \"../post/Avatar\";\nimport AccountProfileService from \"../../api/main/AccountProfileService\";\nexport var USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\nvar stompClient = null;\nvar sessionId = null;\n\nvar ChatBoxSide = /*#__PURE__*/function (_Component) {\n  _inherits(ChatBoxSide, _Component);\n\n  function ChatBoxSide(props) {\n    var _this;\n\n    _classCallCheck(this, ChatBoxSide);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatBoxSide).call(this, props));\n\n    _this.connect = function () {\n      stompClient = Socket.connect();\n      stompClient.connect({}, _this.onConnected, _this.onError);\n    };\n\n    _this.getUserList = function () {\n      return _this.state.userList;\n    };\n\n    _this.getFollowing = function () {\n      console.log(\"USERNmae::\", _this.state.username);\n      AccountProfileService.getFollowingUsers(_this.state.username).then(function (response) {\n        if (response) {\n          console.log(\"FETCHED:::\", response);\n\n          _this.setState({\n            following: [_this.state.username].concat(_toConsumableArray(response.data))\n          });\n        }\n      }); // this.setState({following: [\"FirstLast2\",\"FirstLast3\"]});\n    };\n\n    _this.onConnected = function () {\n      _this.setState({\n        channelConnected: true\n      }); //         let url = stompClient.ws._transport.url;\n      //         url = url.replace(\"ws://localhost:8080/ws\",  \"\");\n      //         url = url.replace(\"/websocket\", \"\");\n      //         url = url.replace(/^[0-9]+\\//, \"\");\n      //         sessionId = url;\n      // Subscribing to the public topic\n\n\n      stompClient.subscribe('/topic/public', _this.onMessageReceived);\n      stompClient.subscribe('/topic/getUser', _this.onRefreshUserList);\n      stompClient.subscribe('/queue/specific-user', function (msg) {\n        console.log(\"SPECIFIC\", msg);\n      }); // Registering user to server\n\n      stompClient.send(\"/app/addUser\", {}, JSON.stringify({\n        sender: _this.state.username,\n        type: 'JOIN'\n      }));\n      stompClient.send(\"/app/getUserlist\", {}, _this.state.username);\n    };\n\n    _this.onError = function (error) {\n      console.error(error);\n    };\n\n    _this.onRefreshUserList = function (payload) {\n      var users = JSON.parse(payload.body);\n      console.log(\"WS Payload:::\", payload);\n\n      _this.setState(function (prevState) {\n        return {\n          userList: users\n        };\n      });\n\n      _this.getFollowing();\n    };\n\n    _this.sendMessage = function (type, value, receiver) {\n      if (stompClient) {\n        var chatMessage = {\n          sender: _this.state.username,\n          content: type === 'TYPING' ? value : value,\n          type: type,\n          receiver: receiver\n        };\n        stompClient.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage)); // clear message text box after sending the message\n      }\n    };\n\n    _this.onMessageReceived = function (payload) {\n      var message = JSON.parse(payload.body);\n\n      if (message.receiver == _this.state.username && !_this.state.receiver.includes(message.sender)) {\n        _this.setState(function (prevState) {\n          return {\n            receiver: [].concat(_toConsumableArray(prevState.receiver), [message.sender])\n          };\n        });\n      }\n\n      if (message.type === 'JOIN') {} else if (message.type === 'LEAVE') {\n        stompClient.send(\"/app/getUserlist\", {}, _this.state.username);\n      } else if (message.type === 'TYPING') {} else if (message.type === 'CHAT') {\n        _this.state.broadcastMessage.push({\n          message: message.content,\n          sender: message.sender,\n          dateTime: message.dateTime,\n          receiver: message.receiver\n        });\n\n        _this.setState({\n          broadcastMessage: _this.state.broadcastMessage\n        });\n      } else {// do nothing...\n      }\n    };\n\n    _this.handleSelectUser = function (user) {\n      // if(!user.includes(this.state.username) && !this.state.receiver.includes(user)) {\n      if (user != _this.state.username && !_this.state.receiver.includes(user)) {\n        _this.setState(function (prevState) {\n          return {\n            receiver: [].concat(_toConsumableArray(prevState.receiver), [user])\n          };\n        });\n      }\n    };\n\n    _this.handleCloseUser = function (remove) {\n      _this.setState(function (prevState) {\n        return {\n          receiver: prevState.receiver.filter(function (user) {\n            return user !== remove;\n          })\n        };\n      });\n    };\n\n    _this.state = {\n      username: sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME),\n      channelConnected: false,\n      broadcastMessage: [],\n      userList: [],\n      receiver: [],\n      // Users who i'm chatting with\n      following: []\n    };\n\n    _this.connect();\n\n    return _this;\n  }\n\n  _createClass(ChatBoxSide, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var components = [];\n\n      for (var i = 0; i < this.state.receiver.length; i++) {\n        console.log(\"Data:::\", this.state.receiver[i]);\n        components.push( /*#__PURE__*/React.createElement(ChatModule, {\n          receiver: this.state.receiver[i],\n          broadcastMessage: this.state.broadcastMessage,\n          handleCloseUser: this.handleCloseUser,\n          sendMessage: this.sendMessage,\n          username: this.state.username,\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }\n        }));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cbox-slide\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 17\n        }\n      }, Array.from(this.state.userList).map(function (user, indexes) {\n        if (_this2.state.following.includes(user)) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: indexes,\n            className: \"card user-holder\",\n            onClick: function onClick() {\n              return _this2.handleSelectUser(user);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 32\n            }\n          }, /*#__PURE__*/React.createElement(Avatar, {\n            username: user,\n            style: {\n              float: 'left'\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 29\n            }\n          }), /*#__PURE__*/React.createElement(\"div\", {\n            style: {\n              float: 'left'\n            },\n            className: \"chat-username\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }\n          }, _this2.state.username === user ? user + \" (You)\" : user));\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chatArea\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }\n      }, components));\n    }\n  }]);\n\n  return ChatBoxSide;\n}(Component);\n\nexport { ChatBoxSide as default };","map":{"version":3,"names":["React","Component","ChatModule","Socket","Avatar","AccountProfileService","USER_NAME_SESSION_ATTRIBUTE_NAME","stompClient","sessionId","ChatBoxSide","props","connect","onConnected","onError","getUserList","state","userList","getFollowing","console","log","username","getFollowingUsers","then","response","setState","following","data","channelConnected","subscribe","onMessageReceived","onRefreshUserList","msg","send","JSON","stringify","sender","type","error","payload","users","parse","body","prevState","sendMessage","value","receiver","chatMessage","content","message","includes","broadcastMessage","push","dateTime","handleSelectUser","user","handleCloseUser","remove","filter","sessionStorage","getItem","components","i","length","Array","from","map","indexes","float"],"sources":["C:/Users/Harshal Taori/Documents/MFPE PROJECT/26  TUESDAY/friendbook-frontend/src/components/chatbox/ChatBoxSide.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport './chatbox.scss';\r\nimport ChatModule from './ChatModule';\r\nimport Socket from '../post/StartSocket';\r\nimport Avatar from \"../post/Avatar\";\r\nimport AccountProfileService from \"../../api/main/AccountProfileService\";\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\nvar stompClient = null;\r\nvar sessionId = null;\r\n\r\nexport default class ChatBoxSide extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME),\r\n            channelConnected: false,\r\n            broadcastMessage: [],\r\n            userList: [],\r\n            receiver: [], // Users who i'm chatting with\r\n            following: []\r\n        }\r\n        this.connect();\r\n    }\r\n\r\n    connect = () => {\r\n        stompClient = Socket.connect();\r\n        stompClient.connect({}, this.onConnected, this.onError);\r\n    }\r\n\r\n    getUserList = () => {\r\n        \r\n      return this.state.userList;\r\n    }\r\n\r\n    getFollowing=()=>{\r\n        console.log(\"USERNmae::\",this.state.username);\r\n        AccountProfileService.getFollowingUsers(this.state.username)\r\n        .then(response => {\r\n\r\n          if (response) {\r\n            console.log(\"FETCHED:::\",response);\r\n            this.setState({following: [this.state.username,...response.data]});\r\n          }\r\n\r\n        })\r\n        // this.setState({following: [\"FirstLast2\",\"FirstLast3\"]});\r\n    }\r\n\r\n    onConnected = () => {\r\n\r\n        this.setState({\r\n          channelConnected: true\r\n        })\r\n\r\n//         let url = stompClient.ws._transport.url;\r\n//         url = url.replace(\"ws://localhost:8080/ws\",  \"\");\r\n//         url = url.replace(\"/websocket\", \"\");\r\n//         url = url.replace(/^[0-9]+\\//, \"\");\r\n\r\n//         sessionId = url;\r\n\r\n        // Subscribing to the public topic\r\n        stompClient.subscribe('/topic/public', this.onMessageReceived);\r\n        stompClient.subscribe('/topic/getUser', this.onRefreshUserList);\r\n        stompClient.subscribe('/queue/specific-user', (msg) => {\r\n            console.log(\"SPECIFIC\", msg);\r\n        });\r\n        // Registering user to server\r\n        stompClient.send(\"/app/addUser\",\r\n        {},\r\n        JSON.stringify({ sender: this.state.username, type: 'JOIN' })\r\n        )\r\n        stompClient.send(\"/app/getUserlist\", {}, this.state.username);\r\n\r\n\r\n    }\r\n\r\n    onError = (error) => {\r\n       console.error(error);\r\n    }\r\n\r\n    onRefreshUserList = (payload) => {\r\n        let users = JSON.parse(payload.body);\r\n        console.log(\"WS Payload:::\", payload);\r\n        this.setState(prevState => ({\r\n            userList: users\r\n        }), );\r\n        this.getFollowing();\r\n    }\r\n\r\n    sendMessage = (type, value, receiver) => {\r\n        if (stompClient) {\r\n            let chatMessage = {\r\n              sender: this.state.username,\r\n              content: type === 'TYPING' ? value : value,\r\n              type: type,\r\n              receiver: receiver  \r\n            };\r\n      \r\n            stompClient.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\r\n      \r\n            // clear message text box after sending the message\r\n        }\r\n    }\r\n\r\n    onMessageReceived = (payload) => {\r\n        let message = JSON.parse(payload.body);\r\n        if (message.receiver == this.state.username && !this.state.receiver.includes(message.sender)) {\r\n            this.setState(prevState => ({\r\n                receiver: [...prevState.receiver, message.sender]\r\n            }))\r\n        }\r\n        if (message.type === 'JOIN') {\r\n         \r\n        }\r\n        else if (message.type === 'LEAVE') {     \r\n            stompClient.send(\"/app/getUserlist\", {}, this.state.username);\r\n        }\r\n        else if (message.type === 'TYPING') {\r\n        }\r\n        else if (message.type === 'CHAT') {\r\n          this.state.broadcastMessage.push({\r\n            message: message.content,\r\n            sender: message.sender,\r\n            dateTime: message.dateTime,\r\n            receiver: message.receiver\r\n          })\r\n          this.setState({\r\n            broadcastMessage: this.state.broadcastMessage,\r\n          })\r\n        }\r\n        else {\r\n          // do nothing...\r\n        }\r\n    }\r\n\r\n\r\n\r\n    handleSelectUser = (user) => {\r\n        // if(!user.includes(this.state.username) && !this.state.receiver.includes(user)) {\r\n        if(user!=(this.state.username) && (!this.state.receiver.includes(user))) {\r\n            this.setState(prevState => ({\r\n                receiver: [...prevState.receiver, user]\r\n            }))\r\n        }\r\n    }\r\n\r\n    handleCloseUser = (remove) => {\r\n        this.setState(prevState => ({\r\n            receiver: prevState.receiver.filter(user => user !== remove)\r\n        }))\r\n    }\r\n    render() {\r\n        const components = [];\r\n        for(var i = 0; i < this.state.receiver.length; i++) {\r\n            console.log(\"Data:::\",this.state.receiver[i])\r\n            components.push(\r\n            <ChatModule receiver={this.state.receiver[i]} broadcastMessage={this.state.broadcastMessage}\r\n                handleCloseUser={this.handleCloseUser}\r\n                sendMessage={this.sendMessage} username={this.state.username} key={i}/>\r\n            );\r\n        }\r\n        return(\r\n            <div>\r\n                <div className=\"cbox-slide\">\r\n                    {\r\n                    Array.from(this.state.userList).map((user, indexes) => { \r\n                        if(this.state.following.includes(user)){\r\n                        return(<div key={indexes} className=\"card user-holder\" onClick={() => this.handleSelectUser(user)}>\r\n                            <Avatar username={user} style={{float: 'left'}}/>\r\n                            <div style={{float: 'left'}} className=\"chat-username\">{this.state.username === user ? user + \" (You)\" : user}</div>\r\n                        </div>);\r\n                        }\r\n                    }\r\n                    )\r\n                    }\r\n                </div>\r\n                <div className=\"chatArea\">\r\n                    {components}\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}